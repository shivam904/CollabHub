# Multi-language development workspace with compilation support
FROM alpine:3.18

# Install all development tools and compilers
RUN apk update && apk add --no-cache \
    # C/C++ development
    build-base \
    gcc \
    g++ \
    make \
    cmake \
    gdb \
    # Python development
    python3 \
    python3-dev \
    py3-pip \
    # Node.js development
    nodejs \
    npm \
    # Java development
    openjdk11 \
    # Go development
    go \
    # Rust development
    rust \
    cargo \
    # Additional tools
    bash \
    bash-completion \
    curl \
    wget \
    git \
    vim \
    nano \
    file \
    tree \
    # Base utilities
    coreutils \
    findutils \
    grep \
    sed \
    gawk \
    tar \
    gzip \
    unzip \
    # Development utilities
    strace \
    ltrace \
    # Text processing
    jq \
    # Network tools (basic)
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Set environment variables
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
ENV PATH=$PATH:$JAVA_HOME/bin
ENV GOPATH=/go
ENV PATH=$PATH:$GOPATH/bin
ENV RUSTUP_HOME=/usr/local/rustup
ENV CARGO_HOME=/usr/local/cargo
ENV PATH=/usr/local/cargo/bin:$PATH

# Configure npm environment for global installs without permission issues
ENV NPM_CONFIG_PREFIX=/usr/local
ENV NPM_CONFIG_CACHE=/tmp/.npm
ENV NODE_OPTIONS=--max-old-space-size=2048

# Create workspace directories
RUN mkdir -p /workspace/src \
             /workspace/bin \
             /workspace/build \
             /workspace/dist \
             /workspace/output \
             /workspace/public \
             /workspace/assets \
             /tmp/collabhub/bin \
             /tmp/collabhub/build \
             /tmp/.npm \
             /root/.npm \
             /usr/local/lib/node_modules

# Set comprehensive write permissions for all directories
RUN chmod -R 777 /workspace /tmp/collabhub /tmp/.npm /root/.npm && \
    chown -R root:root /usr/local/lib/node_modules && \
    chmod -R 777 /usr/local/lib/node_modules /usr/local/bin /usr/local/share && \
    # Set umask for all future file/directory creation
    echo "umask 000" >> /etc/profile && \
    echo "umask 000" >> /root/.bashrc && \
    echo "umask 000" >> /etc/bash.bashrc

# Set working directory
WORKDIR /workspace

# Configure npm for global installs and install essential packages
RUN npm config set prefix '/usr/local' && \
    npm config set cache '/tmp/.npm' && \
    npm install -g create-react-app@latest yarn@latest vite@latest

# Create a non-root user for security (but allow root for compilation)
RUN adduser -D -s /bin/bash developer
RUN echo 'developer ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Copy compilation scripts (these will be added by the Docker workspace service)
# The scripts will be installed at runtime by the dockerWorkspace.js service

# Default command
CMD ["tail", "-f", "/dev/null"]

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["echo", "Workspace is healthy"]

# Labels
LABEL maintainer="CollabHub Team"
LABEL description="Multi-language development workspace with compilation support"
LABEL version="2.0"